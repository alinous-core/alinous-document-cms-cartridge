
include("/include/treemodel.alns");
include("/include/template_container.alns");

$tmpl = getContainerTemplate($IN, $SESSION);

@template_primitive_category = getPrimitiveTemplates($IN, $SESSION);

@left = getChildParts($tmpl.template_container_id, "left");
@right = getChildParts($tmpl.template_container_id, "right");
$sizeLeft = Array.size(@left);
$sizeRight = Array.size(@right);

$dirty = isDirty($tmpl.template_container_id);

// pathes
$templatePath = ContainerTmpl.getContainerDirPath($tmpl.template_container_id);

$modulePath = $templatePath + "indexpreview.alns";

return 0;


function isDirty($template_container_id)
{
	$dir = ContainerTmpl.getContainerDirPath($template_container_id);
	
	$preview = $dir + "indexpreview.html";
	$normal = $dir + "index.html";
	
	if(!File.exists($preview)){
		return false;
	}
	if(!File.exists($normal)){
		return true;
	}
	
	$previewTm = File.getTimestamp($preview);
	$normalTm = File.getTimestamp($normal);
	
	if(Timestamp.before($normalTm, $previewTm)){
		return true;
	}
	
	return false;	
}

function getChildParts($template_container_id, $position)
{
	SELECT
		template_primitive.template_primitive_name, template_primitive.template_primitive_id,
		template_primitive.estimated_height,
		template_primitive.node_id AS p_node_id,
		template_container.template_container_name, template_container.template_container_id,
		template_container.estimated_height AS c_estimated_height,
		template_container.node_id AS c_node_id
	INTO ch
	FROM
		(template_container_children LEFT JOIN template_primitive
		ON
			template_container_children.inner_template_primitive_id = template_primitive.template_primitive_id)
		LEFT JOIN template_container
		ON
			template_container_children.inner_template_container_id = template_container.template_container_id
	WHERE
		template_container_children.template_container_id = $template_container_id AND
		template_container_children.position = $position
	ORDER BY template_container_children.position_order;
	
	$size = Array.size(@ch);
	for($i = 0; $i < $size; $i++){
		if($ch[$i].inner_template_primitive_id != 0){
			$tmpl[$i].name = $ch[$i].template_primitive_name;
			$tmpl[$i].tmpltype = "primitive";
			$tmpl[$i].tmplid = $ch[$i].template_primitive_id;
			$tmpl[$i].estimated_height = $ch[$i].estimated_height / 2;
			$tmpl[$i].node_id = $ch[$i].p_node_id;
		}else if($ch[$i].inner_template_container_id != 0){
			$tmpl[$i].name = $ch[$i].template_container_name;
			$tmpl[$i].tmpltype = "container";
			$tmpl[$i].tmplid = $ch[$i].template_container_id;
			$tmpl[$i].estimated_height = $ch[$i].c_estimated_height / 2;
			$tmpl[$i].node_id = $ch[$i].c_node_id;
		}
	}
	
	return @tmpl;
}

function getPrimitiveTemplates($IN, $SESSION)
{
	$treeId = "primitive";
	
	SELECT * INTO template_primitive_category
	FROM
		template_primitive_category LEFT JOIN tree_model
		ON
			template_primitive_category.node_id = tree_model.node_id AND
			tree_model.tree_id = $treeId
	WHERE
		tree_model.tree_id = $treeId
	ORDER BY tree_model.page_order;
	
	$size = Array.size(@template_primitive_category);
	for($i = 0; $i < $size; $i++){
		@nodes = TreeModel.getChildren($treeId, $template_primitive_category[$i].node_id);
		
		$sizeNode = Array.size(@nodes);
		for($j = 0; $j < $sizeNode; $j++){
			SELECT node_id,template_primitive_id, template_primitive_name, estimated_height
			INTO template_primitive
			FROM
				template_primitive
			WHERE
				template_primitive.node_id = $nodes[$j].node_id;
			
			$template_primitive_category[$i].tmpl[$j] = $template_primitive[0];
		}
	}
	
	return @template_primitive_category;
}

function getContainerTemplate($IN, $SESSION)
{
	SELECT * INTO template_container
	FROM
		template_container
	WHERE
		template_container.node_id = $IN.selectedNodeId;
	
	return $template_container[0];
}
