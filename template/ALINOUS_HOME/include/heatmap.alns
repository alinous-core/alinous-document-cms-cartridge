/*
include("/include/heatmap.alns");
*/

include("/include/serialutils.alns");
include("/include/progress.alns");


function Heatmap.createHeatMap($hm_raster_id, $hm_master_url, $start, $end,
						$referrer, $keywords,
						$archive_page_id, $SESSION, $jobId)
{
	$docSize = Heatmap.getDocumentSize($hm_master_url);
	
	$context = Heatmap.getContext($hm_raster_id);
	
	$path = "/tmp/testmap" + $SESSION + "_" + $context.hm_raster_id + ".png";
	LasterBuffer.newBuffer($path, $docSize.width, $docSize.height);
	
	
	Heatmap.analyzePageAccesses($SESSION, $path, $hm_master_url, $referrer, $keywords,
				$start, $end,
				$docSize.width, $docSize.height, $jobId);
	
	$progress = 0;
	for($i = 0; $i < $docSize.height; $i++){
		BEGIN;
		$lineDataStr = LasterBuffer.getLineValue($path, $i);
		$maxDataValue = LasterBuffer.getMaxLineValue($path, $i);
		
		Heatmap.updateRasterLine($context.hm_raster_id, $i, $lineDataStr, $maxDataValue);
		COMMIT;
		
		$progress++;
		if($progress % 50 == 0){
			ProgressJob.progress($progress, $jobId);
			$progress = 0;
		}
	}
	
	ProgressJob.progress($progress, $jobId);
	
	LasterBuffer.close($path);
	
	Heatmap.createHeatmapImage($context.hm_raster_id, $path);
	
	$imageData = Base64.encodeFromFile($path);
	
	BEGIN;
	
	SELECT hm_master_result_image.hm_master_id INTO hm_master_result_image
	FROM
		hm_master_result_image
	WHERE
		hm_master_result_image.hm_master_id = $hm_raster_id
	FOR UPDATE;
	
	if(Array.size(@hm_master_result_image) == 0){
		INSERT INTO hm_master_result_image(
			hm_master_id,
			image_base64
		)
		VALUES(
			$hm_raster_id,
			$imageData // image_base64
		);
	}else{
		UPDATE hm_master_result_image
		SET
			image_base64 = $imageData
		WHERE
			hm_master_result_image.hm_master_id = $hm_raster_id;
	}
	
	COMMIT;
	
	File.remove($path);
	
	ProgressJob.progress(50, $jobId);
}

function Heatmap.getDocumentSize($url)
{
	SELECT max(wic_user_page_access.documet_width) as width,
			max(wic_user_page_access.documet_height) as height
	INTO wic_user_page_access
	FROM
		wic_user_page_access
	WHERE
		wic_user_page_access.url = $url;
	
	$wic_user_page_access[0].width = Cast.toNumber($wic_user_page_access[0].width);
	$wic_user_page_access[0].height = Cast.toNumber($wic_user_page_access[0].height);
	
	return $wic_user_page_access[0];
}

function Heatmap.analyzePageAccesses($SESSION, $path, $url, $referrer, $keywords, $start, $end, $width, $height, $jobId)
{
	if($referrer != ""){
		$arg_referrer = "%" + String.trim($referrer) + "%";
	}
	if($keywords != ""){
		@words = String.split($keywords, ",");
		
		$idx = 0;
		$size = Array.size(@words);
		for($i = 0; $i < $size; $i++){
			$val = String.trim($words[$i]);
			if($val != ""){
				$arg_keywords[$idx++] = "http%?%" + $val + "%";
			}
		}
		
	}
	
	SELECT user_id, access_id
	INTO wic_user_page_access
	FROM
		wic_user_page_access
	WHERE
		wic_user_page_access.url = $url AND
		wic_user_page_access.access_time >= $start AND
		wic_user_page_access.access_time <= $end AND
		wic_user_page_access.referrer LIKE $arg_referrer AND
		wic_user_page_access.referrer LIKE @arg_keywords
	ORDER BY wic_user_page_access.access_time DESC
	ADJUST_WHERE = TRUE;
	
	$size = Array.size(@wic_user_page_access);
	for($i = 0; $i < $size; $i++){
		BEGIN;
		Heatmap.analyzeOnePage($SESSION, $path,
			$wic_user_page_access[$i].user_id, $wic_user_page_access[$i].access_id, $width, $height);
		COMMIT;
		
		ProgressJob.progress(1, $jobId);
	}
}

function Heatmap.countPageAccesses($url, $start, $end)
{
	SELECT count(*) AS cnt
	INTO wic_user_page_access
	FROM
		wic_user_page_access
	WHERE
		wic_user_page_access.url = $url AND
		wic_user_page_access.access_time >= $start AND
		wic_user_page_access.access_time <= $end;
	
	if($wic_user_page_access[0].cnt == null){
		return 0;
	}
	return Cast.toNumber($wic_user_page_access[0].cnt);
}

function Heatmap.analyzeOnePage($SESSION, $path, $user_id, $access_id, $width, $height)
{
	SELECT * INTO wic_user_motion_archive
	FROM
		wic_user_motion_archive
	WHERE
		wic_user_motion_archive.user_id = $user_id AND
		wic_user_motion_archive.access_id = $access_id AND
		wic_user_motion_archive.motion_type = "mousemoved"
	ORDER BY wic_user_motion_archive.round;
	
	if(Array.size(@wic_user_motion_archive) == 0){
		return 0;
	}
	
	BEGIN;
	
	DELETE FROM hm_user_motion
	WHERE
		hm_user_motion.session_id = $SESSION AND
		hm_user_motion.user_id = $user_id AND
		hm_user_motion.access_id = $access_id;
	
	$serial = 1;
	$size = Array.size(@wic_user_motion_archive);
	for($i = 0; $i < $size; $i++){
		@vals = String.split($wic_user_motion_archive[$i].records, " ");
		
		$valsSize = Array.size(@vals);
		for($j = 0; $j < $valsSize; $j++){
			@event = String.split($vals[$j], ",");
			$current.x = Cast.toNumber($event[0]);
			$current.y = Cast.toNumber($event[1]);
			$current.delta = Cast.toNumber($event[2]);
			
			// handle lastrecord
			if($last.delta != null){
				$stayTime = $current.delta - $last.delta;
				
				INSERT INTO hm_user_motion(
					session_id,
					user_id,
					access_id,
					serial,
					motion_type,
					delta_mill,
					arg_x,
					arg_y
				)
				VALUES(
					$SESSION, // session_id,
					$user_id,
					$access_id,
					$serial,
					'mousemoved', // motion_type,
					$stayTime, // delta_mill,
					$last.x, // arg_x,
					$last.y // arg_y
				);
				$serial++;
			}
			
			// set last record
			$last = $current;
		}
	}
	
	Heatmap.renderMouseMapData($SESSION, $user_id, $access_id, $path, $width, $height);
}

function Heatmap.renderMouseMapData($SESSION, $user_id, $access_id, $path, $width, $height)
{
	SELECT * INTO hm_user_motion
	FROM
		hm_user_motion
	wHERE
		hm_user_motion.session_id = $SESSION AND
		hm_user_motion.user_id = $user_id AND
		hm_user_motion.access_id = $access_id AND
		hm_user_motion.motion_type = 'mousemoved'
	ORDER BY hm_user_motion.serial;
	
	$size = Array.size(@hm_user_motion);
	for($i = 0; $i < $size; $i++){
		if($hm_user_motion[$i].delta_mill > 300){
			$hm_user_motion[$i].delta_mill = 300;
		}
		
		$r = $hm_user_motion[$i].delta_mill * 5 / 10;
		$min = 0;
		$max = $r * 2;
		Heatmap.pointCircleMemory($path, $hm_user_motion[$i].arg_x, $hm_user_motion[$i].arg_y, 
			$r, $width, $height, $min, $max);
	}
}

function Heatmap.createHeatmapImage($hm_raster_id, $path)
{
	SELECT max(hm_raster_line.line_max_value) as max
	INTO maxRecord
	FROM
		hm_raster_line
	WHERE
		hm_raster_line.hm_raster_id = $hm_raster_id;
	
	$maxValue = Cast.toNumber($maxRecord[0].max);
	
	SELECT * INTO hm_raster
	FROM
		hm_raster
	WHERE
		hm_raster.hm_raster_id = $hm_raster_id;
	
	Heatmap.createImage($path, $hm_raster[0].hm_width, $hm_raster[0].hm_height);
	
	Heatmap.loadImage($path);
	
	for($i = 0; $i < $hm_raster[0].hm_height; $i++){
		Heatmap.outLine($hm_raster_id, $i, $hm_raster[0].hm_width, $path, $maxValue);
	}
	
	Heatmap.saveImage($path);
	
	Heatmap.closeImage($path);
}

function Heatmap.outLine($hm_raster_id, $y, $width, $path, $max)
{
	SELECT * INTO hm_raster_line
	FROM
		hm_raster_line
	WHERE
		hm_raster_line.line_idx = $y AND
		hm_raster_line.hm_raster_id = $hm_raster_id;
	
	if(Array.size(@hm_raster_line) == 0){
		Heatmap.lineInputNullLine($path, $y, $width, 0, $max);
	}
	else{
		Heatmap.lineInput($path, $y, $hm_raster_line[0].line_data, 0, $max);
	}
}

function Heatmap.getContext($hm_raster_id)
{
	SELECT hm_master.hm_master_id INTO hm_master
	FROM
		hm_master
	WHERE
		hm_master.hm_raster_id = $hm_raster_id;
		
	$ret.hm_master_id = $hm_master[0].hm_master_id;
	$ret.hm_raster_id = $hm_raster_id;
	
	return $ret;
}


function Heatmap.createHeatmapData($hm_master_name, $archive_page_id,
		$referrer, $keywords, $hm_start, $hm_end, $width, $height)
{
	$hm_raster_id = Common.newSerial("hm_raster");
	INSERT INTO hm_raster(
		hm_raster_id,
		hm_width,
		hm_height
	)
	VALUES(
		$hm_raster_id,
		$width, // hm_width,
		$height // hm_height
	);
	
	$hm_master_id = Common.newSerial("hm_master");
	INSERT INTO hm_master(
		hm_master_id,
		hm_master_name,
		hm_raster_id,
		archive_page_id,
		referrer,
		keywords,
		hm_start,
		hm_end
	)
	VALUES(
		$hm_master_id,
		$hm_master_name,
		$hm_raster_id,
		$archive_page_id,
		$referrer,
		$keywords,
		$hm_start,
		$hm_end
	);
	
	$ret.hm_master_id = $hm_master_id;
	$ret.hm_raster_id = $hm_raster_id;
	
	return $ret;
}



function Heatmap.initRaster($hm_raster_id, $width, $height)
{
	DELETE FROM hm_raster_line
	WHERE
		hm_raster_line.hm_raster_id = $hm_raster_id;
	
	$line_data = "";
	for($i = 0; $i < $width; $i++){
		if($i != 0){
			$line_data = $line_data + " ";
		}
		$line_data = $line_data + "0";
	}
	
	for($line = 0; $line < $height; $line++){
		INSERT INTO hm_raster_line(
			hm_raster_id,
			line_idx,
			line_length,
			line_max_value,
			line_data
		)
		VALUES(
			$hm_raster_id,
			$line, // line_idx,
			$width, //line_length,
			0, // line_max_value,
			$line_data
		);
	}
}

function Heatmap.pointCircleMemory($path, $x, $y, $r, $width, $height, $min, $max)
{
	if($r == 0){
		return 0;
	}
	
	$join_x = $x - $r;
	$join_y = $y - $r;
	
	LasterBuffer.appendCircle($path, $join_x, $join_y, $r,
				$width, $height,
				$min, $max);
}

function Heatmap.updateRasterLine($hm_raster_id, $y, $line_data, $line_max_value)
{
	UPDATE hm_raster_line
	SET
		line_data = $line_data,
		line_max_value = $line_max_value
	WHERE
		hm_raster_line.hm_raster_id = $hm_raster_id AND
		hm_raster_line.line_idx = $y;
}

function Heatmap.getRasterLine($hm_raster_id, $y)
{
	SELECT * INTO hm_raster_line
	FROM
		hm_raster_line
	WHERE
		hm_raster_line.hm_raster_id = $hm_raster_id AND
		hm_raster_line.line_idx = $y;
	
	if(Array.size(@hm_raster_line) > 0){
		return String.split($hm_raster_line[0].line_data, " ");
	}
	
	SELECT * INTO hm_raster
	FROM
		hm_raster
	WHERE
		hm_raster.hm_raster_id = $hm_raster_id;
	
	$line_data = "";
	for($i = 0; $i < $hm_raster[0].hm_width; $i++){
		if($i != 0){
			$line_data = $line_data + " ";
		}
		$line_data = $line_data + "0";
	}	
	
	INSERT INTO hm_raster_line(
		hm_raster_id,
		line_idx,
		line_length,
		line_max_value,
		line_data
	)
	VALUES(
		$hm_raster_id,
		$y, // line_idx,
		$hm_raster[0].hm_width, //line_length,
		0, //line_max_value,
		$line_data
	);
	
	return String.split($line_data, " ");
}

function Heatmap.deleteHeatmapData($path)
{
	
}


